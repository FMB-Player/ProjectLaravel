Flags: TODO: <task>, FIXME: <file>, .NOT_STARTED, .NOT_READY <req>, .IN_PROCESS <person>, .DONE

TODO:1. min 6 attributes (+id).               .DONE
TODO:2. date time                             .DONE (fecha_ingreso@Cliente)
TODO:3. int                                   .DONE (edad@Cliente)
TODO:4. bool                                  .DONE (seguro@Cliente)
TODO:5. str                                   .DONE (nombre@Categoria_ingreso)
TODO:6. str(email)                            .DONE (email@Cliente)
TODO:7. select v option                       .DONE (Categoria@Cliente.edit)
TODO:8. validate ALL (client optional)        .DONE
TODO:9. view message process.                 .DONE
TODO:10. buttons HOME, LIST, CREATE.          .DONE
TODO:11. min 10 registers.                    .DONE

TODO: + Documentation.
    Primero se iniciaría* una base de datos, en nuestro caso común mysql en XMAPP de manera local, esto para poder iniciar la primer migración al crear el proyecto con el comando de composer sin necesidad de ejecutar el comando "php artisan migrate" y más importante poder testear las vistas de forma directa, pero no es realmente necesario y solo es para probar que se puede servir el proyecto con "php artisan serve" y ver la vista welcome default de laravel.
    *Para hacer este proyecto más a prueba de balas, este proyecto usa SQLite y la database.database.sqlite que laravel incluye por defecto como su base de datos y no depende de ningún intérprete de base de datos por la propia naturaleza de SQLite.
    El proyecto inicia tras el comando de composer "Composer create-project --prefer-dist laravel/laravel TrabajoAplicacionesMoviles", en nuestro caso debido al nombre del proyecto.
    Luego se crean los modelos con sus respectivos controladores y vistas. Todas las vistas constan de un diseño general: Índice de listado, vista de elemento, formulario de creación y formulario de edición (que podrían juntarse en una vista pero sumaría complejidad, que puede hacer los archivos más confusos de manejar y separar permite mejor organización).
    Tras crear los elementos a usar, se empieza a codear cada parte, ya sea diseño de vista, el manejo de los controladores, middleware de usarse, estructuración de modelos... que una vez definidos llevan a crear una nueva migración, la cual reflejará los diseños en la base de datos en la que se trabaje y permitirá la creación y manipulación de registros. Estos pasos podrían invertirse, empezando por migración y después modelos-controladores, peor en este caso se hizo en el orden anterior.
    Todas las vistas están diseñadas en el concepto de la "Matrioska": una página principal index posee el menú navbar, footer y elementos generales que van a ser compartidos por todas las vistas, seguido de una vista de categoría (cliente, renta, propiedad, etc) en su respectiva carpeta de vistas que contiene los elementos de las vistas específicas.                    .DONE

tables:
    1. Cliente
        id  int
        nombre_cli  String
        telefono    String
        email   String
        edad    int
        seguro  bool
        fecha_ingreso   datetime
        id_ingreso(FK)  int

    2. Categoria_ingreso
        id_ingreso  int
        nombre  String

views:
    1.Cliente               .DONE
        index (table)
        create (form)
        edit (form)


commands:
php artisan make:migration create_clientes_table --create=clientes                      .DONE
php artisan make:migration create_categoria_ingreso_table --create=categoria_ingreso    .DONE

php artisan make:model Cliente                                                          .DONE
php artisan make:model Categoria_ingreso                                                .DONE

php artisan make:controller ClienteController --resource                                .DONE
php artisan make:controller Categoria_ingresoController --resource                      .DONE

composer require nesbot/carbon

php artisan migrate:fresh                                                               .DONE
